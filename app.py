import os
from flask import Flask, request, jsonify, render_template, session
import logging
from dotenv import load_dotenv
from thread_manager import ThreadManager
from assistant_manager import AssistantManager
import openai

# Load environment variables
load_dotenv()

client = openai.OpenAI()



app = Flask(__name__)
app.secret_key = os.getenv("SECRET_KEY")  # Load the secret key from the environment
app.assistant_id = os.getenv("ASSISTANT_ID")
app.vector_store_id = os.getenv("VECTOR_STORE_ID")

@app.route('/debug_env')
def debug_env():
    return {
        "Assistant ID": os.getenv("ASSISTANT_ID"),
        "Vector Store ID": os.getenv("VECTOR_STORE_ID"),
        "All Env Vars": dict(os.environ)  # 這會回傳所有 Vercel 環境變數
    }


# import secrets
# secret_key = secrets.token_hex(16)  # Generates a 32-character hexadecimal string (128 bits)
# print(secret_key)

# Flask route to render the HTML page
@app.route('/')
def index():
    return render_template('index.html')

# API endpoint to assist the employee
@app.route('/assist', methods=['POST'])
def assist():
    data = request.get_json()
    query = data.get('query')
    #thread_id = data.get('thread_id')
    thread_manager = ThreadManager()
    thread_id = thread_manager.create_thread()
    if not thread_id:
        return jsonify({"error": "Failed to create thread"}), 500  # 回傳錯誤
    # Create or retrieve the user's thread
    # thread_manager = ThreadManager()
    # if thread_id:
    #     thread_manager.thread = thread_manager.client.beta.threads.retrieve(thread_id=thread_id)
    # else:
    # thread_manager.create_thread()

    # 記錄 session 與 thread_id
    #logging.info(f" Thread ID: {session.get('thread_id')}")

    # Add message and run assistant
    thread_manager.add_message_to_thread(role="user", content=f"Help employee with this query: {query}?")
    #run = thread_manager.run_assistant(assistant_id=AssistantManager.assistant_id, instructions=f"Help employee with this query: {query}")
    summary = thread_manager.run_assistant(assistant_id=AssistantManager.assistant_id, instructions=f"Help employee with this query: {query}")

     # Wait for the assistant to complete the task
    #thread_manager.wait_for_completion(run)

    # Get the summary generated by the assistant
    #summary = thread_manager.process_message()

    # wait for run to complete
    # create summary
    # return summary

    return jsonify({'summary': summary, 'thread_id': thread_manager.thread.id})

if __name__ == '__main__':

    # Instantiate the assistant manager (only creates assistant once)
    assistant_manager = AssistantManager()
    # 從環境變數中獲取 Vector Store ID
    vector_store_id = os.getenv("VECTOR_STORE_ID")

    if not vector_store_id:
        raise ValueError("Vector Store ID is not set in environment variables.")

    assistant = client.beta.assistants.update(
        assistant_id=AssistantManager.assistant_id,
        tool_resources={"file_search": {"vector_store_ids": [vector_store_id]}},
        )

    # Run the Flask application
    app.run(debug=True)

    print(f"Assistant ID from env: {os.getenv('ASSISTANT_ID')}")
    print(f"Vector Store ID from env: {os.getenv('VECTOR_STORE_ID')}")
    print(os.environ)  # 確保這些變數出現在 Vercel 環境中